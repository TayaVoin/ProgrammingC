#include <stdio.h>
#include <stdlib.h>

// Функция для заполнения матрицы
void fillMatrix(int **matrix, int rows, int cols) {
    printf("Введите элементы матрицы:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            scanf("%d", &matrix[i][j]);
        }
    }
}

// Функция для печати матрицы
void printMatrix(int **matrix, int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%3d ", matrix[i][j]);
        }
        printf("\n");
    }
}

// Функция для обработки матрицы
void processMatrix(int **matrix, int rows, int cols) {
    int *zeroCounts = (int *)calloc(cols, sizeof(int)); // Подсчет нулей в каждом столбце

    // Подсчет нулей в каждом столбце
    for (int j = 0; j < cols; j++) {
        for (int i = 0; i < rows; i++) {
            if (matrix[i][j] == 0) {
                zeroCounts[j]++;
            }
        }
    }

    // Увеличение элементов в столбцах с нулями
    for (int j = 0; j < cols; j++) {
        if (zeroCounts[j] > 0) {
            for (int i = 0; i < rows; i++) {
                matrix[i][j] += zeroCounts[j];
            }
        }
    }

    free(zeroCounts); // Освобождение памяти

    // Транспонирование матрицы
    int **transposed = (int **)malloc(cols * sizeof(int *));
    for (int i = 0; i < cols; i++) {
        transposed[i] = (int *)malloc(rows * sizeof(int));
    }

    // Заполнение транспонированной матрицы
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            transposed[j][i] = matrix[i][j];
        }
    }

    // Замена местами первого и последнего столбца
    for (int j = 0; j < cols; j++) {
        int temp = transposed[j][0];
        transposed[j][0] = transposed[j][rows - 1];
        transposed[j][rows - 1] = temp;
    }

    // Освобождение памяти исходной матрицы
    for (int i = 0; i < rows; i++) {
        free(matrix[i]);
    }
    free(matrix);

    // Перенос указателя на новую транспонированную матрицу
    matrix = transposed;

    // Печать окончательной матрицы
    printf("Финальная матрица после обработки:\n");
    printMatrix(matrix, cols, rows);

    // Освобождение памяти для транспонированной матрицы
    for (int i = 0; i < cols; i++) {
        free(transposed[i]);
    }
    free(transposed);
}

int main() {
    int rows, cols;

    printf("Введите количество строк: ");
    scanf("%d", &rows);
    printf("Введите количество столбцов: ");
    scanf("%d", &cols);

    // Выделение памяти для матрицы
    int **matrix = (int **)malloc(rows * sizeof(int *));
    for (int i = 0; i < rows; i++) {
        matrix[i] = (int *)malloc(cols * sizeof(int));
    }

    // Заполнение матрицы
    fillMatrix(matrix, rows, cols);
    
    // Печать исходной матрицы
    printf("Исходная матрица:\n");
    printMatrix(matrix, rows, cols);

    // Обработка матрицы
    processMatrix(matrix, rows, cols);

    return 0;
}